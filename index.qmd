---
title: "The Duality of Data Visualization"
subtitle: "Visualizing Data for Insight and Communication"
author: "Jannik Buhr"
date: "June 20, 2022"
institute: Heidelberg Institute for Theoretical Studies
abstract: |
  As scientists we interact with data on a daily basis.
  We generate or collect data and analyse it to answer our research questions.
  Visualizations play a key role in this process.
  Not only do we rely on visualizations to spot patterns in our data,
  they are also a vital part when it comes to communicating our findings.
  In this talk we will explore concepts related to data visualization on a theoretical and practical basis to take our data visualizations to the next level.
  The example data we will be using is not specific to any research field and even though code examples use the language R there will be something to take away for everyone, whether you research very large or very small things and whether you code in R, python or julia.
format:
  revealjs:
    css: styles.css
    chalkboard: true
    theme: [default, hits.scss]
    logo: ./img/hits-logo.png
    footer: "[jmbuhr.de/hits-scientific-seminar-datavis](https://jmbuhr.de/hits-scientific-seminar-datavis)"
    code-copy: true
    code-link: true
    fig-responsive: true
    citations-hover: true
    footnotes-hover: true
    slide-number: true
link-citations: true
bibliography: references.bib
nocite: |
  @Allaire_Quarto_2022
execute:
  echo: true
  enabled: true
  warning: false
  cache: true
engine: knitr

---

# The Grammar of Graphics {auto-animate="true" data-id="gg"}

::: footer
[@wilkinsonGrammarGraphics2005a; @wickhamLayeredGrammarGraphics2010a]
:::

# The Grammar of Graphics {auto-animate="true" data-id="gg" auto-animate-duration="1.2"}

::: columns
::: {.column width="40%"}
![](./img/pexels-karolina-grabowska-4887167.jpg){width="60%"}
:::

::: {.column .incremental width="60%"}
-   basesd on "The Grammar of Graphics" by Leland Wilkinson
-   popularized by Hadley Wickham with the R packge `ggplot2`
-   No monolitic plotting functions but instead a set of blocks to combine
-   powerful
-   iterative
-   expressive
:::
:::

::: footer
[@wilkinsonGrammarGraphics2005a; @wickhamLayeredGrammarGraphics2010a]
:::

::: notes
-> frees us from constraints, allows to create any plot possible, allows quick iterai
:::

# Let's go on a trip!

```{r}
#| echo: false
library(tidyverse)
library(palmerpenguins)
library(rayshader)
library(knitr)
library(ggtext)

data(volcano)
colnames(volcano) <- 1:ncol(volcano)
volcano <- volcano |> 
  as_tibble() |> 
  mutate(y = 1:n()) |> 
  pivot_longer(-y, names_to = "x", names_transform = parse_number)

# theme_set(theme_minimal())
```

## Palmer Archipelago {background-iframe="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3572669.243839383!2d-66.65912791297224!3d-64.07273637748037!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xbc78dd6dc38c572b%3A0xe609367aeed33087!2sPalmer%20Archipelago!5e0!3m2!1sen!2sde!4v1648136525579!5m2!1sen!2sde"}

# Penguins!

![](./img/lter_penguins.png)

::: aside
Artwork by \@allisonhorst
:::

::: footer
[@R-palmerpenguins]
:::

## Penguins!

```{r}
penguins |> head() |> kable()
```

::: footer
[@R-palmerpenguins]
:::

## Penguins

```{r}
#| eval: false
penguins
```

## Penguins

```{r fig-penguins}
#| output-location: fragment
#| fig-cap: Penguins!
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))
```

## Penguins

```{r}
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()
```

## Penguins

```{r}
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()
```

## The Principles of a Plot
  
::: {.columns}
::: {.column width="60%"}
```{r}
#| echo: false
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  facet_wrap(~island, labeller=label_both) +
  theme(text = element_text(size = 20))
```
:::
::: {.column width="40%" .incremental}
- data and aesthetic mappings
- geometric objects
- scales
- facet specification
- statistical transformations
- the coordinate system
:::
:::


:::footer
[@wickhamLayeredGrammarGraphics2010a]
:::


## The Principles of a Plot

:::{#fig-pie layout=[[1,2]]}
```{r} 
#| echo: false
cols <- c('#0292D8', '#F7EA39', '#C4B632')
data <- tibble(
  value = c(280, 60, 20),
  id    = fct_inorder(c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'))
)

plt <- ggplot(data, aes(x = "", y = value, fill = id)) +
  geom_col() +
  scale_fill_manual(values = cols, name = "") +
  theme(legend.text = element_text(size = 20),
        plot.margin = unit(rep(0, 4), "lines"))
plt +
  guides(fill = "none")
```

:::fragment
```{r}
#| echo: false
plt +
  coord_polar(clip = "off", theta = "y",
              start = 2.45) +
  theme_void() +
  theme(legend.text = element_text(size = 20),
        plot.margin = unit(rep(0, 4), "lines"))
```
:::

Coordinate systems
:::


# The Duality of Data Visualization

Plotting for yourself vs. plotting to **communicate**.

## Penguins

```{r}
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  scale_color_manual(values = c(Chinstrap = "#c55bca",
                                Gentoo    = "#047076",
                                Adelie    = "#ff6900"))
```

![](./img/lter_penguins.png){width=30% #small-penguins}

## Penguins

```{r}
#| code-fold: true
steve <- penguins |>
  filter(species == "Chinstrap", bill_length_mm > 57)

penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species, group = species)) +
  geom_smooth(method = "lm", se = FALSE, alpha = 0.6) +
  geom_point(aes(shape = species), size = 1.4) +
  scale_color_manual(values = c(Chinstrap = "#c55bca",
                                Gentoo    = "#047076",
                                Adelie    = "#ff6900")) +
  guides(shape = "none", color = "none") +
  labs(x = "Bill length [mm]",
       y = "Bill depth [mm]",
       title = "Penguins of the Palmer Archipelago",
       subtitle = "Species: <span style='color: #c55bca'>**Chinstrap**</span>, <span style='color: #047076'>**Gentoo**</span> and <span style='color: #ff6900'>**Adelie**</span>",
       caption = "Datasource: (Horst, Hill, and Gorman 2020)") +
   annotate(
    geom = "curve", x = 55, y = 14,
    xend = steve$bill_length_mm, yend = steve$bill_depth_mm - 0.3, 
    curvature = .3, size = 1, arrow = arrow(length = unit(2, "mm"))
  ) +
  annotate(
    geom = "text",
    label = "Steve",
    x = 55, y = 14, vjust = 0.5, hjust = 1.2,
    fontface = "bold"
  ) +
  theme_minimal() +
  theme(plot.subtitle = element_markdown(size = 16),
        plot.title = element_text(size = 18))
```

![](./img/lter_penguins.png){width=30% #small-penguins}

## Speaking of Color

:::{layout="[[1,1],[1,1]]" #fig-colorpanel .fig-colorpanel}
```{r}
#| label: fig-blues
#| fig-cap: Volcano dataset, default colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  coord_fixed() +
  geom_tile()
```

```{r}
#| label: fig-rainbow
#| fig-cap: Rainbow colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  geom_tile() +
  coord_fixed() +
  scale_fill_gradientn(colors = rainbow(10))
```

```{r}
#| label: fig-viridis
#| fig-cap: Viridis colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  geom_tile() +
  coord_fixed() +
  scale_fill_viridis_c()
```

```{r} 
#| label: fig-terrain
#| fig-cap: Terrain colors
#| echo: false

plt <- volcano |>
  ggplot(aes(y, x, z = value, fill = value)) +
  geom_tile() +
  geom_contour(color = "black") +
  scale_x_continuous("X", expand = c(0, 0)) +
  scale_y_continuous("Y", expand = c(0, 0)) +
  scale_fill_gradientn("Z", colours = terrain.colors(10)) +
  coord_fixed() +
  theme_classic() +
  guides(fill = "none")

plot_gg(plt, multicore = TRUE, raytrace = TRUE,
        width = 7, height = 4,
        scale = 300, windowsize = c(1400, 866),
        zoom = 0.55, phi = 35, theta = 20)
Sys.sleep(0.1)
render_snapshot(clear = TRUE)
```

Â 
:::

::: {.notes}
- perceptually uniform
- works in color and b/w
- works for common forms of color blindness
:::

:::footer
More, see; <https://bids.github.io/colormap/>
:::


# Tidy Data

> "Happy families are all alike;\
> every unhappy family is unhappy in its own way"\
> --- Leo Tolstoy

:::footer
<https://tidyr.tidyverse.org/articles/tidy-data.html>
:::

## Tidy Data

@wickhamTidyData2014

## Tidy Data

notes:

- not always the most space effective
- not being in a tidy format is not necessarily bad
- but tidy works well with ggplot
- and allows you to think about your data more effectively
- knowing the rules allows you to break them
  with purpose
- similarities: feature matrix / vector in machine learning
  are in a tidy format!

# Other Implementations

## Python: plotnine

```{python}
#| label: fig-plotnine
#| eval: false
from plotnine import *
(
ggplot(r.penguins, aes('bill_length_mm', 'bill_depth_mm'))
 + geom_point()
)
```

![](./img/plotnine.png)

## Python: Seaborn (nextgen)

```{python}
#| label: fig-seaborn
#| eval: false
import seaborn as sns
import seaborn.objects as so
from palmerpenguins import load_penguins
penguins = load_penguins()
sns.set_theme(style="whitegrid")

(
so.Plot(penguins, "bill_length_mm", "bill_depth_mm", color="species")
    .add(so.Scatter(fillalpha=1))
    .configure(figsize=(7,4))
    .save("img/seaborn.png")
)
```

![](./img/seaborn.png)

## Julia: Gadfly 

```julia
using Gadfly, PalmerPenguins, DataFrames
penguins = DataFrame(PalmerPenguins.load());
p = plot(penguins, x=:bill_length_mm, y=:bill_depth_mm, Geom.point);
img = SVG("img/julia_plot.svg", 14cm, 8cm)
draw(img, p)
```

![Gadfly plot](./img/julia_plot.svg)

## Common themes

e.g. ggplot and seaborn:

- geom -> mark
- stat -> stat
- position -> move
- scale -> scale

# Resources

## Books and other resources

::: {.columns}
::: {.column width="50%"}
- ggplot2: Elegant Graphics for Data Analysis [@pedersenWelcomeGgplot2]
- R Graphics Cookbook [@changGraphicsCookbook2nd]
- "How Charts Lie" -- Alberto Cairo [@cairoHowChartsLie2019]
- "Guide to Information Graphics" -- Dona M. Wong [@wongWallStreetJournal2013]
- Tidy Data [@wickhamTidyData2014]
:::
::: {.column width="50%"}
:::flex
![](img/2022-06-02-12-03-17.png)

![](img/2022-06-02-12-09-48.png)

![](img/2022-06-02-11-50-02.png)

![](img/2022-06-02-11-54-31.png)
:::
:::
:::


# Thank You!

## Thank You!

### Want to learn more?

::: {layout="[1,1,0.5]"}
![See you on the otter slide.](https://media.giphy.com/media/Ov2S60rDmVTMc/giphy.gif){#otterslide}

::: profile
-   [jmbuhr](https://github.com/jmbuhr.de){.bi-github}
-   [jmbuhr.de](https://jmbuhr.de){.bi-house}
-   [jannikbuhr](https://twitter.com/jannikbuhr){.bi-twitter}
-   [jmbuhr](https://www.linkedin.com/in/jmbuhr/){.bi-linkedin}
:::

[Slides:]{#qrcode}
:::

```{=html}
<style>
figcaption {
    text-align: center;
}
</style>
```
```{=html}
<script src="./www/qrcode.min.js"></script>
```
```{=html}
<script type="text/javascript">
let elem = document.getElementById("qrcode")
new QRCode(elem, "https:/github.com/jmbuhr/hits-scientific-seminar-datavis");
</script>
```
## References

::: {#refs}
:::

