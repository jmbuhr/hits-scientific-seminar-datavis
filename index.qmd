---
title: "The Duality of Data Visualization"
subtitle: "Visualizing Data for Insight and Communication"
author: "Jannik Buhr"
date: "June 20, 2022"
institute: Heidelberg Institute for Theoretical Studies
abstract: |
  As scientists we interact with data on a daily basis.
  We generate or collect data and analyse it to answer our research questions.
  Visualizations play a key role in this process.
  Not only do we rely on visualizations to spot patterns in our data,
  they are also a vital part when it comes to communicating our findings.
  In this talk we will explore concepts related to data visualization on a theoretical and practical basis to take our data visualizations to the next level.
  The example data we will be using is not specific to any research field and even though code examples use the language R there will be something to take away for everyone, whether you research very large or very small things and whether you code in R, python or julia.
format:
  revealjs:
    css: styles.css
    chalkboard: true
    theme: [default, hits.scss]
    logo: ./img/hits-logo.png
    footer: "[jmbuhr.de/hits-scientific-seminar-datavis](https://jmbuhr.de/hits-scientific-seminar-datavis)"
    code-copy: true
    code-link: true
    fig-responsive: true
    citations-hover: true
    footnotes-hover: true
    slide-number: true
link-citations: true
bibliography: references.bib
nocite: |
  @Allaire_Quarto_2022
execute:
  echo: true
  enabled: true
  warning: false
  cache: true
engine: knitr

---

# The Grammar of Graphics {auto-animate="true" data-id="gg"}

::: footer
[@wilkinsonGrammarGraphics2005a; @wickhamLayeredGrammarGraphics2010a]
:::

# The Grammar of Graphics {auto-animate="true" data-id="gg" auto-animate-duration="1.2"}

::: columns
::: {.column width="40%"}
![](./img/pexels-karolina-grabowska-4887167.jpg){width="60%"}
:::

::: {.column .incremental width="60%"}
-   based on "The Grammar of Graphics" by Leland Wilkinson
-   popularized by Hadley Wickham with the R package `ggplot2`
-   No monolithic plotting functions but instead a set of blocks to combine
-   powerful
-   iterative
-   expressive
:::
:::

::: footer
[@wilkinsonGrammarGraphics2005a; @wickhamLayeredGrammarGraphics2010a]
:::

# Let's go on a trip!

```{r setup}
#| echo: false
#| cache: false
library(tidyverse)
library(palmerpenguins)
library(rayshader)
library(knitr)
library(ggtext)

# reticulate::use_condaenv("base")

data(volcano)
colnames(volcano) <- 1:ncol(volcano)
volcano <- volcano |> 
  as_tibble() |> 
  mutate(y = 1:n()) |> 
  pivot_longer(-y, names_to = "x", names_transform = parse_number)

theme_set(theme_minimal() %+% theme(panel.background = element_rect(color = "black")))
```

## Palmer Archipelago {background-iframe="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3572669.243839383!2d-66.65912791297224!3d-64.07273637748037!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xbc78dd6dc38c572b%3A0xe609367aeed33087!2sPalmer%20Archipelago!5e0!3m2!1sen!2sde!4v1648136525579!5m2!1sen!2sde"}

# Penguins!

![](./img/lter_penguins.png)

::: aside
Artwork by \@allisonhorst
:::

::: footer
[@R-palmerpenguins]
:::

## Penguins!

```{r}
#| label: penguins-set
#| classes: 'penguins-table'
penguins |> head() |> kable()
```

![](img/2022-06-20-11-16-09.png){width=40%}

::: aside
Artwork by \@allisonhorst
:::

::: footer
[@R-palmerpenguins]
:::

## A Grammar of Graphics

```{r}
#| eval: false
penguins
```

## A Grammar of Graphics

```{r fig-penguins}
#| output-location: fragment
#| fig-cap: Penguins!
#| code-line-numbers: '2'
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))
```

## A Grammar of Graphics

```{r}
#| code-line-numbers: '3'
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()
```

## A Grammar of Graphics

```{r}
#| code-line-numbers: '2'
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()
```

## Elements of a Plot
  
::: {.columns}
::: {.column width="60%"}
```{r}
#| echo: true
penguins |>
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)) +
  geom_smooth(method = lm, se = FALSE) +
  geom_smooth(aes(group = island),
                  method = lm,
                  se = FALSE,
                  linetype = 2,
                  color = "black") +
  geom_point(aes(shape=sex)) +
  facet_wrap(~island, labeller=label_both) +
  scale_shape(na.value = 15) +
  theme(text = element_text(size = 20))
```
:::
::: {.column width="40%" .incremental}
- data and aesthetic mappings
  - x/y(/z)
  - color
  - fill
  - alpha
  - group
  - shape/linetype
  - size/area
- (layers of) geometric objects
- scales
- facet specification
- statistical transformations
- the coordinate system
:::
:::


:::footer
[@wickhamLayeredGrammarGraphics2010a]
:::

## Elements of a Plot
  
::: {.columns}
::: {.column width="60%"}
```{r}
#| echo: true
penguins |>
  ggplot(aes(x = bill_length_mm,
             color = species,
             fill = species)) +
  geom_histogram(alpha=0.4,
                 position = "identity") +
  theme(text = element_text(size = 20))
```
:::
::: {.column width="40%"}
- data and aesthetic mappings
  - x/y(/z)
  - color
  - fill
  - alpha
  - group
  - shape/linetype
  - size/area
- (layers of) geometric objects
- scales
- facet specification
- statistical transformations
- the coordinate system
:::
:::


:::footer
[@wickhamLayeredGrammarGraphics2010a]
:::

## Elements of a Plot

:::{#fig-pie layout=[[1,2.5]]}
```{r} 
#| echo: false
#| fig-width: 4
#| fig-heigth: 14
#| fig-cap: 'A stacked bar chart'
cols <- c('#0088c2', '#ffcc00', '#cfa500')
data <- tibble(
  value = c(280, 60, 20),
  id    = fct_inorder(c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'))
)

plt <- ggplot(data, aes(x = "", y = value, fill = id)) +
  geom_col() +
  scale_fill_manual(values = cols, name = "") +
  theme(legend.text = element_text(size = 20),
        plot.margin = unit(rep(0, 4), "lines"))
plt +
  guides(fill = "none")
```

:::fragment
```{r}
#| echo: false
#| fig-cap: '`+ coord_polar()`'
plt +
  coord_polar(clip = "off", theta = "y",
              start = 2.45) +
  theme_void() +
  theme(legend.text = element_text(size = 20),
        plot.margin = unit(rep(0, 4), "lines"))
```
:::

Coordinate systems
:::


# The Duality of Data Visualization

Plotting for yourself vs. plotting to **communicate**.

## Consistent Colors

```{r}
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()
```

## Consistent Colors

```{r}
#| code-line-numbers: '4-6'
penguins |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  scale_color_manual(values = c(Chinstrap = "#c55bca",
                                Gentoo    = "#047076",
                                Adelie    = "#ff6900"))
```

![](./img/lter_penguins.png){width=30% #small-penguins}

## Direct Labels

```{r}
#| echo: false
Brenda <- penguins |>
  filter(species == "Chinstrap", bill_length_mm > 57)

penguins |>
  filter(!is.na(sex)) |>
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species, group = species)) +
  geom_smooth(method = lm, se = FALSE, alpha = 0.6) +
  geom_point(aes(shape = sex), size = 1.4) +
  scale_color_manual(values = c(Chinstrap = "#c55bca",
                                Gentoo    = "#047076",
                                Adelie    = "#ff6900")) +
  guides(color = "none") +
  labs(x = "Bill length [mm]",
       y = "Bill depth [mm]",
       title = "One of these penguins is not like the others",
       subtitle = "Species: <span style='color: #c55bca'>**Chinstrap**</span>, <span style='color: #047076'>**Gentoo**</span> and <span style='color: #ff6900'>**Adelie**</span>",
       caption = "Datasource: (Horst, Hill, and Gorman 2020)") +
   annotate(
    geom = "curve", x = 55, y = 14,
    xend = Brenda$bill_length_mm, yend = Brenda$bill_depth_mm - 0.3, 
    curvature = .3, size = 1, arrow = arrow(length = unit(2, "mm"))
  ) +
  annotate(
    geom = "text",
    label = "Brenda",
    x = 55, y = 14, vjust = 0.5, hjust = 1.2,
    fontface = "bold"
  ) +
  theme_minimal() +
  theme(plot.subtitle = element_markdown(size = 16),
        plot.title = element_text(size = 18),
        legend.position = "bottom")
```

![](./img/lter_penguins.png){width=30% #small-penguins}

![](img/2022-06-20-11-16-09.png){width=30% #bills}

## Inclusive and Truthful Colors

:::{layout="[[1,1],[1,1]]" #fig-colorpanel .fig-colorpanel}
```{r}
#| label: fig-blues
#| fig-cap: Volcano dataset, default colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  coord_fixed() +
  geom_tile()
```

```{r}
#| label: fig-rainbow
#| fig-cap: Rainbow colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  geom_tile() +
  coord_fixed() +
  scale_fill_gradientn(colors = rainbow(10))
```

```{r}
#| label: fig-viridis
#| fig-cap: Viridis colors
#| echo: false
volcano |> 
  ggplot(aes(y, x, fill = value)) +
  geom_tile() +
  coord_fixed() +
  scale_fill_viridis_c()
```

```{r} 
#| label: fig-terrain
#| fig-cap: Terrain colors
#| echo: false

plt <- volcano |>
  ggplot(aes(y, x, z = value, fill = value)) +
  geom_tile() +
  geom_contour(color = "black") +
  scale_x_continuous("X", expand = c(0, 0)) +
  scale_y_continuous("Y", expand = c(0, 0)) +
  scale_fill_gradientn("Z", colours = terrain.colors(10)) +
  coord_fixed() +
  theme_classic() +
  guides(fill = "none")

plot_gg(plt, multicore = TRUE, raytrace = TRUE,
        width = 7, height = 4,
        scale = 300, windowsize = c(1400, 866),
        zoom = 0.55, phi = 35, theta = 20)
Sys.sleep(0.1)
render_snapshot(clear = TRUE)
```

Your choice of color palettes matters.
:::

::: {.notes}
- perceptually uniform
- works in color and b/w
- works for common forms of color blindness
:::

:::footer
More, see; <https://bids.github.io/colormap/>
:::

## Simplify, but Don't Oversimplify

```{r}
#| echo: false
datasauRus::box_plots |> 
  pivot_longer(everything()) |> 
  ggplot(aes(name, value)) +
  geom_boxplot() +
  scale_x_discrete(breaks = 0, name = "")
```


## Simplify, but Don't Oversimplify

```{r}
#| echo: false
datasauRus::box_plots |> 
  pivot_longer(everything()) |> 
  ggplot(aes(name, value)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.2) +
  scale_x_discrete(breaks = 0, name = "")
```

## Simplify, but Don't Oversimplify

```{r}
#| echo: false
datasauRus::box_plots |> 
  pivot_longer(everything()) |> 
  ggplot(aes(name, value)) +
  geom_violin() +
  scale_x_discrete(breaks = 0, name = "")
```
 
## Simplify, but Don't Oversimplify

```{r}
#| echo: false
datasauRus::box_plots |> 
  pivot_longer(everything()) |> 
  ggplot(aes(name, value)) +
  ggbeeswarm::geom_quasirandom(size = 0.2) +
  scale_x_discrete(breaks = 0, name = "")
```


## Simplify, but Don't Oversimplify

![@artworkAllisonHorst](img/2022-06-08-09-08-06.png)


# Tidy Data

> "Happy families are all alike;\
> every unhappy family is unhappy in its own way"\
> --- Leo Tolstoy

:::footer
<https://tidyr.tidyverse.org/articles/tidy-data.html>
:::

## Tidy Data

![](img/2022-06-07-13-13-52.png){.fr}

- by Hadley Wickham [@wickhamTidyData2014]
- derived from Codd's Third Normal Form [@coddFurtherNormalizationData1972]
- allows the direct mapping between aesthetics and variables

### Every row is a penguin

### Every column is a property of penguins

![Figure from @grolemundDataScienceImport2017](img/2022-06-07-11-20-44.png)

## Tidy Data


::: {.incremental}
- not always the most space effective
- not being in a tidy format is not necessarily bad
- but tidy works well with ggplot
- and allows you to think about your data more effectively
- similarities: feature matrix / vector in machine learning
  are in a tidy format!
- knowing the rules allows you to break them
  with purpose
:::


## Break the Rules

```{r}
#| code-line-numbers: '1-2'
penguins |> 
  select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) |> 
  head() |> 
  kable()
```

## Break the Rules

```{r}
#| code-line-numbers: '3'
penguins |> 
  select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) |> 
  pivot_longer(-species) |>
  head() |> 
  kable()
```

Every penguin is now **spread across 4 rows**.


## Break the Rules

```{r} 
#| code-line-numbers: '4-10'
penguins |> 
  select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) |> 
  pivot_longer(-species) |> 
  ggplot(aes(value, fill = species)) +
  geom_density(alpha = 0.4) +
  facet_wrap(~name, scales="free") +
  scale_fill_manual(values = c(Chinstrap = "#c55bca",
                                Gentoo    = "#047076",
                                Adelie    = "#ff6900"))
```


# Other Implementations of Grammars

## Python: plotnine

```{python} 
#| include: false
```

```{python}
#| label: fig-plotnine
#| fig-cap: A plotnine plot.
#| code-line-numbers: '6-7'
import warnings
warnings.simplefilter("ignore")
from plotnine import *

print(
ggplot(r.penguins, aes('bill_length_mm', 'bill_depth_mm', color='species'))
 + geom_point()
);
```


:::footer
<https://plotnine.readthedocs.io/en/stable/index.html>
:::


## Python: Seaborn (nextgen)

```{python seaborn}
#| label: fig-seaborn
#| fig-cap: A seaborn plot.
#| code-line-numbers: '6-7'
import warnings
warnings.simplefilter("ignore")
import seaborn.objects as so

(
so.Plot(r.penguins, "bill_length_mm", "bill_depth_mm", color="species")
    .add(so.Scatter(fillalpha=1))
).show();
```

:::footer
<https://seaborn.pydata.org/nextgen/>
:::

## Julia: Gadfly 

```julia
using Gadfly, PalmerPenguins, DataFrames
penguins = DataFrame(PalmerPenguins.load());
p = plot(penguins, x=:bill_length_mm, y=:bill_depth_mm, Geom.point);
img = SVG("img/julia_plot.svg", 14cm, 8cm)
draw(img, p)
```

![Gadfly plot](./img/julia_plot.svg)

:::footer
<http://gadflyjl.org/stable/>
:::

# The greater context

## The greater context

> "Somehow all plotting libraries converge into some object based language."\
> --- \@tsuname

. . .

Objects are just **implementation details**

:::footer
<https://twitter.com/tsuname/status/1528162783975514112?s=20&t=5SBAhFLQ7VcINH5DLUDUFg>
:::


## Jannik's predictions for the future

Jannik's predictions for the future

. . .

![](./img/future-once.gif)


## Jannik's predictions for the future

::: {.incremental}
- modal systems $\gt$ monolithic structures
- composition $\gt$ inheritance
  - `python`: method chaining
    ```python 
    baseplot(data).add(Scatter()).add(...)
    ```
  - `R`: operator overloading (nearly `|>`)
    ```r
    ggplot(data) + geom_scatter() + theme()
    ```
  - `haskell`: function composition
    ```haskell
    addScatter :: Plot -> Plot
    addTheme . addScatter $ basePlot data
    -- read: addTheme after  addScatter applied to ...
    ```
- declarative $\gt$ imperative
:::


# Resources

## Books and other resources

::: {.columns}
::: {.column width="50%"}
- ggplot2: Elegant Graphics for Data Analysis [@pedersenWelcomeGgplot2]
- R Graphics Cookbook [@changGraphicsCookbook2nd]
- "How Charts Lie" -- Alberto Cairo [@cairoHowChartsLie2019]
- "Guide to Information Graphics" -- Dona M. Wong [@wongWallStreetJournal2013]
- Tidy Data [@wickhamTidyData2014]
:::
::: {.column width="50%"}
:::flex
![](img/2022-06-02-12-03-17.png)

![](img/2022-06-02-12-09-48.png)

![](img/2022-06-02-11-50-02.png)

![](img/2022-06-02-11-54-31.png)
:::
:::
:::


# Thank You!

## Thank You!

### Want to learn more?

::: {layout="[1,1,0.5]"}
![See you on the otter slide.](https://media.giphy.com/media/Ov2S60rDmVTMc/giphy.gif){#otterslide}

::: profile
- [jmbuhr](https://github.com/jmbuhr.de){.bi-github}
- [jmbuhr.de](https://jmbuhr.de){.bi-house}
- [jannikbuhr](https://twitter.com/jannikbuhr){.bi-twitter}
- [jmbuhr](https://www.linkedin.com/in/jmbuhr/){.bi-linkedin}
:::

[Slides: [github.com/jmbuhr/hits-scientific-seminar-datavis](https:/github.com/jmbuhr/hits-scientific-seminar-datavis)]{#qrcode}
:::

```{=html}
<style>
figcaption {
    text-align: center;
}
</style>
<script src="./www/qrcode.min.js"></script>
<script type="text/javascript">
let elem = document.getElementById("qrcode")
new QRCode(elem, "https:/github.com/jmbuhr/hits-scientific-seminar-datavis");
</script>
```

## References

::: {#refs}
:::

